 have a Next.js + TypeScript + Tailwind portfolio dashboard. Please fix the following issues and improve the UI/UX. Keep scraping/unofficial APIs server-side only and don’t break the existing data shape. I will upload data/portfolio.json (from my sample Excel) that contains: name, symbol, exchange, purchasePrice, quantity, sector.

Problems to fix
	1.	Banner shows: “Live updates temporarily unavailable. Retrying connection… Last known values are displayed.”
	•	Make live polling reliable (quotes every 15s, metrics every 60s).
	•	Add robust retry with exponential backoff, but don’t spam logs.
	•	If a cycle fails, keep previous values and clear the banner automatically once recovered.
	•	Add a subtle spinner near “Last updated”.
	2.	Holdings box / stock cards look unprofessional.
	•	Replace with a clean, professional table/dashboard:
	•	Sticky header, zebra rows, compact density (desktop), comfortable on mobile.
	•	Right-align numbers, use monospace for numeric columns.
	•	Color gain/loss: green for ≥0, red for <0.
	•	Add sector grouping with collapsible headers and sector totals (Investment, Present Value, Gain/Loss).
	•	Optional small KPI cards at top: Total Investment, Present Value, Net P/L, Daily Refresh Status.
	3.	Can’t verify live values (CMP, present value, gain/loss, P/E, latest earnings).
	•	Ensure client calls batch endpoints:
	•	GET /api/quotes?symbols=A,B,C → returns [{ symbol, cmp, ts }].
	•	GET /api/metrics?symbols=A,B,C → returns [{ symbol, peRatio, latestEarnings, ts }].
	•	Poll with SWR or React Query (refreshInterval/refetchInterval).
	•	Compute on client:
	•	investment = purchasePrice * quantity
	•	presentValue = cmp * quantity
	•	gainLoss = presentValue - investment
	•	portfolioPercent = investment / totalInvestment * 100
	•	Show tooltips when a field is “—” (e.g., “Symbol missing” or “Fetch failed; will retry.”)
	4.	“Invalid Date” shown in “Last updated”.
	•	Root cause: missing/invalid timestamp from server or using new Date(undefined).
	•	Fix: API must return ISO timestamps (ts = new Date().toISOString()), and client must format via new Date(ts) with a null/undefined guard.
	•	If no data yet, show Last updated: — (not “Invalid Date”).
	•	Update “Last updated” on every successful polling cycle (quotes) and display time in local timezone.

Implementation details
	•	Server (API routes): Next.js route handlers with caching + throttling.
	•	Use lru-cache (TTL: quotes 15s, metrics 60s) and bottleneck to rate-limit.
	•	Quotes: Yahoo Finance (unofficial) — use yahoo-finance2 or HTML/JSON parse (server only).
	•	Metrics: Google Finance (unofficial) — parse P/E and latest earnings (server only).
	•	Always return HTTP 200 with partial data; for failures include { error: 'reason' } but keep previous cached values server-side when possible.
	•	Return ts as ISO strings.
	•	Client (data fetching):
	•	Build the unique symbol list from portfolio.json (skip rows with null symbol).
	•	Poll quotes every 15s; metrics every 60s.
	•	Merge results into rows; compute derived fields with pure functions.
	•	If fetch fails, display last known values and a small banner; clear banner once success returns.
	•	UI/UX (Tailwind + react-table):
	•	Professional table:
	•	Columns: Particulars, Purchase Price, Qty, Investment, Portfolio (%), NSE/BSE, CMP, Present Value, Gain/Loss, P/E Ratio, Latest Earnings.
	•	Sticky header, hover rows, focus states, accessible labels.
	•	Sector grouping:
	•	Collapsible groups with a summary row (bold): total investment, total PV, sector P/L.
	•	KPI header cards (optional):
	•	Total Investment, Total PV, Net P/L, Last Updated.
	•	Use text-green-600 / text-red-600 for P/L and font-mono for numbers.
	•	Error handling & diagnostics:
	•	Add lightweight console logs with a DEBUG_LIVE=1 flag.
	•	Show a retry counter in state (not in UI) and backoff: 1s, 2s, 4s, max 15s; reset on success.
	•	Guard against NaN and undefined in all calculations; display “—” when not computable.

Acceptance criteria
	•	No “Invalid Date”. “Last updated” shows a valid local time or “—” before first success.
	•	Live banner only appears during actual failures and auto-clears on recovery.
	•	Quotes refresh every ~15s; metrics every ~60s; no duplicate per-row requests (use batched symbols).
	•	Table looks clean and professional on desktop and mobile, with proper alignment and color cues.
	•	Sector grouping works; totals are correct and update with live CMP.
	•	Missing symbols are skipped gracefully; the row still renders from static data.
	•	Caching confirms fewer upstream calls within TTL; throttling prevents bursts.

Files to review/update (examples)
	•	/app/api/quotes/route.ts & /app/api/metrics/route.ts — ensure ISO ts, caching, throttling, graceful partials.
	•	/app/page.tsx — symbol extraction, polling cadence, lastUpdated logic.
	•	/components/PortfolioTable.tsx — professional table layout, numeric alignment, colors.
	•	/components/SectorGroup.tsx — collapsible summaries.
	•	/lib/calc.ts — pure math helpers (investment, presentValue, gainLoss, weights).
	•	/styles/globals.css — any minor global tweaks.

Test data

Use these Indian tickers to verify live fetch if my file is missing symbols:
	•	RELIANCE.NS, TCS.NS, HDFCBANK.NS, INFY.NS

Please implement the fixes, refactor the UI to a professional dashboard, and ensure all acceptance criteria pass. After changes, run the app and show me the working preview. I will upload data/portfolio.json immediately.